{"version":3,"sources":["components/Navbar.js","components/Table.js","components/ThermometerRender.js","components/Section.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","to","pathname","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","TableHead","scope","TableBody","rows","datos","map","row","index","key","date","temperaturec","temperaturef","onClick","eliminar","Table","style","margin","ThermometerRender","useState","data","setData","useEffect","timerId","setInterval","temp","Math","round","random","Date","toLocaleTimeString","handle","tick","clearInterval","theme","value","max","steps","format","size","height","Section","marginTop","measure","filter","fila","i","App","link","Link","path","Contact","component","Home","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.524cf052.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\n\r\nconst Navbar  =  (props) => {\r\n\r\n    return(\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <Link className=\"navbar-brand\" to={{pathname: \"/\"}}>Home</Link> \r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button> \r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                        <ul className=\"navbar-nav mr-auto\"> \r\n                        <li className=\"nav-item\">\r\n                          <Link className=\"nav-link\" to={{pathname:\"/contact\"}}>Contact</Link>\r\n                        </li> \r\n                        <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to={{pathname:\"/section\"}}>Thermometer</Link>\r\n                        </li>\r\n                        </ul>\r\n                        <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                        <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';  \r\n\r\n    const TableHead  =  () => {\r\n        return(\r\n            <thead>\r\n                <tr>\r\n                <th scope=\"col\">Date</th>\r\n                <th scope=\"col\">Temperature (ºC)</th>\r\n                <th scope=\"col\">Temperature (ºF)</th>\r\n                <th scope=\"col\">Action</th>\r\n                </tr>\r\n            </thead> \r\n        );\r\n    }\r\n      \r\n    const TableBody = props => {\r\n    \r\n        const rows = props.datos.map((row,index) =>{\r\n            return <tr key = {index}>\r\n                    <td>{row.date} </td>\r\n                    <td>{row.temperaturec} </td>\r\n                    <td>{row.temperaturef} </td> \r\n                    <td><button className=\"btn btn-secondary\" onClick={()=>props.eliminar(index)}>Delete</button></td>\r\n                   </tr>\r\n        });\r\n\r\n        return <tbody>{rows}</tbody>;\r\n}\r\n\r\nconst Table = (props) => {\r\n    return ( \r\n            <table className=\"table table-hover\" style ={{margin:'20px'}}>  \r\n                <TableHead />\r\n                <TableBody datos={props.datos} eliminar={props.eliminar} />\r\n            </table>   \r\n            );  \r\n    }\r\n\r\n\r\nexport default Table;","import React, {useState,useEffect} from \"react\";\r\nimport Thermometer from \"react-thermometer-component\";\r\nimport \"../thermometer.css\";\r\n\r\nconst ThermometerRender = (props) => {\r\n  \r\n  const [data, setData] = useState({\r\n    date: \"\",\r\n    temperaturec: \"\",\r\n    temperaturef:\"\"\r\n  });\r\n\r\n  useEffect(() =>{\r\n    \r\n    function tick(){\r\n\r\n      const temp  = Math.round(Math.random() * 100);      \r\n      setData({ date: new Date().toLocaleTimeString(),\r\n                temperaturec : temp,\r\n                temperaturef: temp * 72 });\r\n      \r\n      //Return data to parent (Section)\r\n      props.handle(data);\r\n              \r\n    }\r\n    \r\n    const timerId = setInterval(() => tick(), 2000)\r\n\r\n    return function cleanUp(){  \r\n      clearInterval(timerId);\r\n    }\r\n\r\n  })\r\n \r\n \r\n \r\n  // // componentDidMount() {\r\n  //   this.timerId = setInterval(() => this.tick(), 1000);\r\n  // }\r\n  \r\n  // componentWillUnmount() {\r\n  //   clearInterval(this.timerId);\r\n  // }\r\n\r\n  // tick() {\r\n  //   this.setState({\r\n  //     temperature: Math.round(Math.random() * 100),\r\n  //     date: new Date().toLocaleDateString,\r\n  //   });\r\n  // }\r\n  \r\n  \r\n    return (\r\n      <div className=\"jumbotron\">\r\n        <div className=\"row justify-content-center\">\r\n          <h6 className=\"display-4\">Temperature</h6>\r\n        </div>\r\n        <div className=\"row justify-content-center margin-top\">\r\n          <Thermometer\r\n            theme=\"dark\"\r\n            value={data.temperaturec}\r\n            max=\"100\"\r\n            steps=\"3\"\r\n            format=\"°C\"\r\n            size=\"large\"\r\n            height=\"300\"\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n \r\n\r\nexport default ThermometerRender;\r\n","import React, { useState } from \"react\";\r\nimport Table from \"./Table\";\r\nimport ThermometerRender from \"./ThermometerRender\";\r\nimport Formulario from \"./Formulario\";\r\n\r\nexport default function Section() {\r\n  const [data, setData] = useState([]);\r\n\r\n  function eliminar(index) {\r\n    setData(\r\n      data.filter((fila, i) => {\r\n        return i !== index;\r\n      })\r\n    );\r\n  }\r\n\r\n  function handleSubmit(measure) {\r\n    setData([...data, measure]);\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <div className=\"row justify-content-center\" style={{marginTop:'50px'}}>\r\n      <div className=\"col-lg-6\" style={{margin:'10px'}}>\r\n      <ThermometerRender handle={handleSubmit} /> \r\n      </div> \r\n      <div className=\"jumbotron\" style={{margin:'10px'}}>\r\n        <div className=\"row justify-content-center \" > \r\n      <h3>Logs</h3>\r\n      <Table datos={data} eliminar={eliminar} />    \r\n      </div>\r\n      </div></div> \r\n    </section>\r\n  );\r\n};\r\n\r\n// export default Section;\r\n","import React from 'react';\nimport { Route, BrowserRouter as Router,Switch,Link } from 'react-router-dom';  \nimport Navbar from './components/Navbar';  \nimport  Section from './components/Section';\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n\nexport default function App() {\n  return (\n    <Router>\n    <div>\n      <Navbar link={Link} />\n\n      {/* A <Switch> looks through its children <Route>s and\n          renders the first one that matches the current URL. */}\n      <Switch>\n        <Route path=\"/contact\">\n          <Contact />\n        </Route>\n        <Route path=\"/section\" component={Section}> \n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </div>\n  </Router>\n )\n};\n\nfunction Home() {\n  return <h2>Home</h2>;\n}\n\nfunction Contact() {\n  return <h2>Contact Me</h2>;\n}\n ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}