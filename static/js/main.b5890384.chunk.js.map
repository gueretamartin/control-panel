{"version":3,"sources":["App.js","serviceWorker.js","components/ThermometerRender.js","components/Navbar.js","index.js"],"names":["App","React","Component","Boolean","window","location","hostname","match","ThermometerRender","class","theme","value","max","steps","format","size","height","Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","routing","basename","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0PAoBeA,G,6KAXb,OAMA,yC,GARgBC,IAAMC,YCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,mCCQSC,G,6KApBX,OACA,yBAAKC,MAAM,aACX,yBAAKA,MAAM,8BACT,wBAAIA,MAAM,aAAV,gBAEA,yBAAKA,MAAM,yCACX,kBAAC,IAAD,CACEC,MAAM,OACNC,MAAM,KACNC,IAAI,MACJC,MAAM,IACNC,OAAO,QACPC,KAAK,QACLC,OAAO,c,GAfiBf,IAAMC,YC2BvBe,EA5BE,WAEb,OACY,yBAAKC,UAAU,+CACV,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,QACD,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMP,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BQ,GAAG,iBACzC,wBAAIR,UAAU,sBACd,wBAAIA,UAAU,YACd,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,SAA9B,SAEA,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,gBAA/B,iBAGF,0BAAMD,UAAU,4BAChB,2BAAOA,UAAU,uBAAuBE,KAAK,OAAOO,YAAY,WAChE,4BAAQT,UAAU,iCAAiCE,KAAK,UAAxD,c,iBCZlBQ,EACJ,kBAAC,IAAD,CAAeC,SAAS,KACzB,kBAAC,IAAD,KACG,6BACE,kBAAC,QAAD,CAAOC,KAAK,IAAIC,UAAWd,IAC3B,kBAAC,QAAD,CAAOa,KAAK,IAAIC,UAAW/B,IACvB,kBAAC,QAAD,CAAO8B,KAAK,eAAeC,UAAWvB,OAKhDwB,IAASC,OAAOL,EAASM,SAASC,eAAe,SH8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b5890384.chunk.js","sourcesContent":["import React from 'react';\nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n// import Navbar from './components/Navbar' \n// import Home from './components/Home'\n// import ThermometerRender from './components/ThermometerRender';\n// import { BrowserRouter as Router, Route,Link} from 'react-router-dom';\n\nclass App extends React.Component {\n  render (){\n  return ( \n      // <Router>\n      //     {/* <Navbar />   */}\n      //     <Route exact path=\"/\" component={<Home />} />\n      //     <Route path=\"/thermometer\" component={<ThermometerRender/>} />\n      // </Router>\n  <div>Hola</div>\n  \n  )};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Thermometer from \"react-thermometer-component\";\r\nimport '../thermometer.css'\r\n\r\nclass ThermometerRender extends React.Component {\r\n  render(){\r\n    return (\r\n    <div class=\"jumbotron\">\r\n    <div class=\"row justify-content-center\">\r\n      <h6 class=\"display-4\">Temperature</h6>\r\n      </div>\r\n      <div class=\"row justify-content-center margin-top\"> \r\n      <Thermometer\r\n        theme=\"dark\"\r\n        value=\"50\"\r\n        max=\"100\"\r\n        steps=\"3\"\r\n        format=\"Â°C\"\r\n        size=\"large\"\r\n        height=\"300\" \r\n      /> \r\n    </div>\r\n    </div>\r\n  )};\r\n};\r\n\r\nexport default ThermometerRender;\r\n","import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\n\r\nconst Navbar  =  () => {\r\n\r\n    return(\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                     <Link className=\"navbar-brand\" to=\"/\">Home</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button> \r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                        <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/home\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                          <Link className=\"nav-link\" to =\"/thermometer\">Thermometer</Link>\r\n                        </li> \r\n                        </ul>\r\n                        <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                        <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\nimport ReactDOM from 'react-dom'; \nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport ThermometerRender from './components/ThermometerRender';  \nimport Navbar from './components/Navbar'; \nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\nimport BrowserRouter from 'react-router-dom/BrowserRouter';\n\nconst routing = (\n  <BrowserRouter basename=\"/\">\n <Router>\n    <div>\n      <Route path=\"/\" component={Navbar} />\n      <Route path=\"/\" component={App} />\n          <Route path=\"/thermometer\" component={ThermometerRender} /> \n    </div>\n  </Router>\n  </BrowserRouter>\n)\nReactDOM.render(routing, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}