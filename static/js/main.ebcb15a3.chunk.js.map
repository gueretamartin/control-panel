{"version":3,"sources":["serviceWorker.js","components/ThermometerRender.js","components/Navbar.js","components/TableHead.js","components/DeleteButton.js","components/TableBody.js","components/Table.js","index.js"],"names":["Boolean","window","location","hostname","match","ThermometerRender","props","state","temperature","date","Date","toLocaleDateString","this","timerId","setInterval","tick","clearInterval","setState","Math","round","random","className","theme","value","max","steps","format","size","height","React","Component","Navbar","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","TableHead","scope","DeleteButton","TableBody","class","Table","App","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sPAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oCCkCSC,G,wDA9Cb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAACC,YAAa,KACbC,MAAM,IAAIC,MAAOC,oBAHf,E,gEAOE,IAAD,OACjBC,KAAKC,QAAUC,aACb,kBAAM,EAAKC,SACX,O,6CAKFC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACZT,YAAaU,KAAKC,MAAsB,IAAhBD,KAAKE,UAC7BX,MAAM,IAAIC,MAAOC,uB,+BAKnB,OACA,yBAAKU,UAAU,aACf,yBAAKA,UAAU,8BACb,wBAAIA,UAAU,aAAd,gBAEA,yBAAKA,UAAU,yCACf,kBAAC,IAAD,CACEC,MAAM,OACNC,MAAOX,KAAKL,MAAMC,YAClBgB,IAAI,MACJC,MAAM,IACNC,OAAO,QACPC,KAAK,QACLC,OAAO,c,GAzCiBC,IAAMC,YC2BvBC,EA5BE,WAEb,OACY,yBAAKV,UAAU,+CACV,kBAAC,IAAD,CAAMA,UAAU,eAAeW,GAAG,KAAlC,QACD,4BAAQX,UAAU,iBAAiBY,KAAK,SAASC,cAAY,WAAWC,cAAY,iBAAiBC,gBAAc,gBAAgBC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMjB,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2BkB,GAAG,iBACzC,wBAAIlB,UAAU,sBACd,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWW,GAAI,gBAA/B,gBAEF,wBAAIX,UAAU,YACd,kBAAC,IAAD,CAAMA,UAAU,WAAWW,GAAG,iBAA9B,eAGA,0BAAMX,UAAU,4BAChB,2BAAOA,UAAU,uBAAuBY,KAAK,OAAOO,YAAY,WAChE,4BAAQnB,UAAU,iCAAiCY,KAAK,UAAxD,cCATQ,EApBK,WAEhB,OACI,+BACI,4BACA,wBAAIC,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,uBACA,wBAAIA,MAAM,OAAV,uBACA,wBAAIA,MAAM,OAAV,aCEGC,E,uKARX,OACE,4BAAQV,KAAK,SAASZ,UAAU,qBAAhC,c,GAHqBQ,IAAMC,WCgDlBc,EA/CG,WAChB,OACE,+BACE,wBAAIvB,UAAU,cACZ,0CACA,sCACA,mCACA,4BACE,kBAAC,EAAD,QAGJ,wBAAIwB,MAAM,cACR,0CACA,sCACA,mCACA,4BACE,kBAAC,EAAD,QAGJ,wBAAIA,MAAM,cACR,0CACA,sCACA,mCACA,4BACE,kBAAC,EAAD,QAGJ,wBAAIA,MAAM,cACR,0CACA,sCACA,mCACA,4BACE,kBAAC,EAAD,QAGJ,wBAAIA,MAAM,cACR,0CACA,qCACA,oCACA,4BACE,kBAAC,EAAD,UC3BKC,E,uKATP,OACI,2BAAOzB,UAAU,qBACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GANKQ,IAAMC,WCKrBiB,G,6KAEF,OACA,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAWlB,IAC3B,kBAAC,IAAD,CAAOiB,KAAK,eAAeC,UAAW5C,IACtC,kBAAC,IAAD,CAAO2C,KAAK,gBAAgBC,UAAWH,S,GAP7BjB,IAAMC,YAcxBoB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SP4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ebcb15a3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport Thermometer from \"react-thermometer-component\";\r\nimport '../thermometer.css'\r\n\r\nclass ThermometerRender extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {temperature: \"10\",\r\n                  date: new Date().toLocaleDateString\r\n  }\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.timerId = setInterval(\r\n      () => this.tick(),\r\n      1000\r\n    )\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    clearInterval(this.timerId);\r\n  }\r\n\r\n  tick() {\r\n    this.setState({\r\n      temperature: Math.round(Math.random() * 100),\r\n      date: new Date().toLocaleDateString\r\n    });\r\n  }\r\n\r\n  render(){\r\n    return (\r\n    <div className=\"jumbotron\">\r\n    <div className=\"row justify-content-center\">\r\n      <h6 className=\"display-4\">Temperature</h6>\r\n      </div>\r\n      <div className=\"row justify-content-center margin-top\"> \r\n      <Thermometer\r\n        theme=\"dark\"\r\n        value={this.state.temperature} \r\n        max=\"100\"\r\n        steps=\"3\"\r\n        format=\"Â°C\"\r\n        size=\"large\"\r\n        height=\"300\" \r\n      /> \r\n    </div>\r\n    </div> \r\n  )};\r\n};\r\n\r\nexport default ThermometerRender;\r\n","import React from 'react';\r\nimport { Link} from 'react-router-dom';\r\n\r\nconst Navbar  =  () => {\r\n\r\n    return(\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                     <Link className=\"navbar-brand\" to=\"/\">Home</Link>\r\n                    <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarColor02\" aria-controls=\"navbarColor02\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                        <span className=\"navbar-toggler-icon\"></span>\r\n                    </button> \r\n                    <div className=\"collapse navbar-collapse\" id=\"navbarColor02\">\r\n                        <ul className=\"navbar-nav mr-auto\"> \r\n                        <li className=\"nav-item\">\r\n                          <Link className=\"nav-link\" to =\"/thermometer\">Thermometer</Link>\r\n                        </li> \r\n                        <li className=\"nav-item\">\r\n                        <Link className=\"nav-link\" to=\"/exampleTable\">Measuring</Link>\r\n                        </li>\r\n                        </ul>\r\n                        <form className=\"form-inline my-2 my-lg-0\">\r\n                        <input className=\"form-control mr-sm-2\" type=\"text\" placeholder=\"Search\" />\r\n                        <button className=\"btn btn-secondary my-2 my-sm-0\" type=\"submit\">Search</button>\r\n                        </form>\r\n                    </div>\r\n                </nav>\r\n\r\n\r\n    );\r\n}\r\n\r\nexport default Navbar;","import React from 'react'; \r\n\r\nconst TableHead  =  () => {\r\n\r\n    return(\r\n        <thead>\r\n            <tr>\r\n            <th scope=\"col\">Date</th>\r\n            <th scope=\"col\">Temperature (ÂºC)</th>\r\n            <th scope=\"col\">Temperature (ÂºF)</th>\r\n            <th scope=\"col\">Action</th>\r\n            </tr>\r\n        \r\n           \r\n        </thead>\r\n    \r\n     \r\n       \r\n\r\n    );\r\n}\r\n\r\nexport default TableHead;","import React from \"react\";\r\n\r\nclass DeleteButton extends React.Component {\r\n  render() {\r\n    return (\r\n      <button type=\"button\" className=\"btn btn-secondary\">\r\n        Delete\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DeleteButton;\r\n","import React from \"react\";\r\nimport DeleteButton from \"./DeleteButton\";\r\n\r\nconst TableBody = () => {\r\n  return (\r\n    <tbody>\r\n      <tr className=\"table-dark\">\r\n        <td>24/07/2020</td>\r\n        <td>10Âº</td>\r\n        <td>50F</td>\r\n        <td>\r\n          <DeleteButton />\r\n        </td>\r\n      </tr>\r\n      <tr class=\"table-dark\">\r\n        <td>25/07/2020</td>\r\n        <td>15Âº</td>\r\n        <td>78F</td>\r\n        <td>\r\n          <DeleteButton />\r\n        </td>\r\n      </tr>\r\n      <tr class=\"table-dark\">\r\n        <td>26/07/2020</td>\r\n        <td>-5Âº</td>\r\n        <td>32F</td>\r\n        <td>\r\n          <DeleteButton />\r\n        </td>\r\n      </tr>\r\n      <tr class=\"table-dark\">\r\n        <td>27/07/2020</td>\r\n        <td>32Âº</td>\r\n        <td>64F</td>\r\n        <td>\r\n          <DeleteButton />\r\n        </td>\r\n      </tr>\r\n      <tr class=\"table-dark\">\r\n        <td>28/07/2020</td>\r\n        <td>5Âº</td>\r\n        <td>134F</td>\r\n        <td>\r\n          <DeleteButton />\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  );\r\n};\r\n\r\nexport default TableBody;\r\n","import React from 'react'; \r\nimport TableHead from './TableHead'\r\nimport TableBody from './TableBody';\r\n\r\nclass Table  extends React.Component  {\r\n\r\n    render(){\r\n        return(\r\n            <table className=\"table table-hover\">\r\n                <TableHead />\r\n                <TableBody />\r\n            </table>   \r\n            ); \r\n    } \r\n    }\r\n    \r\nexport default Table;","import React from 'react';\nimport ReactDOM from 'react-dom';  \nimport * as serviceWorker from './serviceWorker';\nimport { Route, BrowserRouter as Router } from 'react-router-dom';\nimport ThermometerRender from './components/ThermometerRender';  \nimport Navbar from './components/Navbar'; \nimport Table from './components/Table'; \nimport \"bootswatch/dist/darkly/bootstrap.min.css\";\n\nclass App extends React.Component { \n  render() { \n    return ( \n    <Router> \n       {/* <Switch>   */}\n        <Route path=\"/\" component={Navbar} />\n        <Route path=\"/thermometer\" component={ThermometerRender} /> \n        <Route path=\"/exampleTable\" component={Table} />\n        {/* </Switch>  */}\n    </Router>\n    )};\n}\n\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}